'use babel'
// @flow

import type {DevToolTargetConfig} from "../../../types";
import type {PackageInfos} from '../../../ProjectSystemEpic/PackageFeature/Types/types.js.flow';

type ConfigSchemaPartBase = {
  title?: string,
  description?: string,
};

type ObjectConfigSchema = {
  type: 'object',
  default: Object,
  schemas: {[key: string]: ConfigSchemaPart}
};

type ArrayConfigSchema = {
  type: 'array',
  default: ConfigSchemaPart,
  items: ConfigSchemaPart,
};

type StringConfigSchema = {
  type: 'string',
  default: string,
  placeholder?: string,
};

type BooleanConfigSchema = {
  type: 'boolean',
  default: boolean,
};

type NumberConfigSchema = {
  type: 'number',
  default: number,
  placeholder?: string,
};

type ConditionalConfigSchema<T> = {
  type: 'conditional',
  default: T,
  expression: T,
  cases: {[key: T]: ConfigSchemaPart}
}

type EnumConfigSchema = {
  type: 'enum',
  default: DevToolTargetConfig,
  enum: Array<{value: any, description: string}>,
};

export type ConfigSchemaPart = ConfigSchemaPartBase &
                                (ArrayConfigSchema | StringConfigSchema | BooleanConfigSchema | NumberConfigSchema | EnumConfigSchema | ObjectConfigSchema | ConditionalConfigSchema<any>);

export type DevToolInfos = {
  id: string,
  name: string,
  iconUri: string,
}

export type SSHConfigSchema = {
  type: 'object',
  schemas: {
    username: {
      type: 'string',
      default: '',
      title: 'username'
    },
    privateKeyPath: {
      type: 'string',
      default: '',
      title: 'key path'
    }
  }
};

export type SSHConfig = {
  username: string,
  privateKeyPath: string,
}

export type HostConfigSchema = {
  type: 'object',
  schemas: {
    host: {
      type: 'string',
      default: '',
      title: 'host'
    },
    port: {
      type: 'number',
      default: 22,
      title: 'port'
    }
  }
};

export type HostConfig = {
  host: string,
  port: number,
  transport: SSHConfig,
};

export type Stager = {
  type: 'integrated'
} | {
  type: 'local'
} | {
  type: 'remote',
  host: HostConfig
};

export type DevToolTargetConfigSchema = ConfigSchemaPart & {tool: DevToolInfos};

export type TargetConfig = {tool: DevToolInfos, config: any, pinned?: boolean, name?: string, stager: Stager, packageInfos: PackageInfos};
