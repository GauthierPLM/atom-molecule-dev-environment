'use babel'
// @flow

import type {DevToolPlanConfig} from "../../../types";
import type {PackageInfos} from "../../../ProjectSystemEpic/PackageFeature/Types/types.js.flow";

export type ConfigSchemaPartBase = {
  title?: string,
  description?: string,
};

export type ObjectConfigSchema = {
  type: 'object',
  default: Object,
  schemas: {[key: string]: ConfigSchemaPart}
};

export type ArrayConfigSchema = {
  type: 'array',
  default: ConfigSchemaPart,
  items: ConfigSchemaPart,
};

export type StringConfigSchema = {
  type: 'string',
  default: string,
  placeholder?: string,
};

export type BooleanConfigSchema = {
  type: 'boolean',
  default: boolean,
};

export type NumberConfigSchema = {
  type: 'number',
  default: number,
  placeholder?: string,
};

export type ConditionalConfigSchema<T> = {
  type: 'conditional',
  default: string,
  expression: EnumConfigSchema | StringConfigSchema,
  cases: {[key: string]: ?ConfigSchemaPart}
}

export type EnumConfigSchema = {
  type: 'enum',
  default: DevToolPlanConfig,
  enum: Array<{value: any, description: string}>,
};

export type ConfigSchemaPart = ConfigSchemaPartBase &
                                (ArrayConfigSchema | StringConfigSchema | BooleanConfigSchema | NumberConfigSchema | EnumConfigSchema | ObjectConfigSchema | ConditionalConfigSchema<any>);

export type DevToolInfos = {
  id: string,
  name: string,
  iconUri: string,
}

export type SSHConfigSchema = {
  type: 'object',
  schemas: {
    username: {
      type: 'string',
      default: '',
      title: 'username'
    },
    privateKeyPath: {
      type: 'string',
      default: '',
      title: 'key path'
    }
  }
};

export type SSHConfig = {
  username: string,
  privateKeyPath: string,
}

export type HostConfigSchema = {
  type: 'object',
  schemas: {
    host: {
      type: 'string',
      default: '',
      title: 'host'
    },
    port: {
      type: 'number',
      default: 22,
      title: 'port'
    }
  }
};

export type HostConfig = {
  host: string,
  port: number,
  transport: SSHConfig,
};

export type Stager = {
  type: 'integrated'
} | {
  type: 'local'
} | {
  type: 'remote',
  host: HostConfig
};

export type AddPlanConfigSchemaAction = {
  type: "ADD_PLAN_CONFIGURATION_SCHEMA",
  payload: {
    tool: DevToolInfos,
    schema: ConfigSchemaPart,
  },
};

export type DevToolPlanConfigSchema = ConfigSchemaPart & {tool: DevToolInfos};

export type PlanConfig = {tool: DevToolInfos, config: any, pinned?: boolean, name: string, stager: Stager, packageInfos: PackageInfos};
